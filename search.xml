<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello Java</title>
    <url>/2015/07/12/2015-07-12-Hello%20Java/</url>
    <content><![CDATA[<h4 id="Hello-Java"><a href="#Hello-Java" class="headerlink" title="Hello Java!"></a>Hello Java!</h4><hr>
<p>我的第一个Java程序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2015/01/01/2015-01-01-Hello%20World/</url>
    <content><![CDATA[<p>Hello World! </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>First</title>
    <url>/2017/03/03/2017-03-03-First/</url>
    <content><![CDATA[<a id="more"></a>
<!--记录一下。-->]]></content>
  </entry>
  <entry>
    <title>label标签使用</title>
    <url>/2017/03/09/2017-03-09-label%E6%A0%87%E7%AD%BE%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>页面上使用label标签时要注意：</p>
<a id="more"></a>

<blockquote>
<ul>
<li>input能被label标签包含</li>
<li>label的for属性值为input等控件的id</li>
<li>对齐时使用text-align:right/left即可</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript isNaN()函数</title>
    <url>/2017/03/29/2017-03-29-JavaScript%20isNaN()%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>isNaN()函数用于检查其参数是否是非数字值。</p>
<a id="more"></a>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>isNaN(x)</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">x</td>
<td align="left">必需。要检测的值。</td>
</tr>
</tbody></table>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>如果 x 是特殊的非数字值 NaN（或者能被转换为这样的值），返回的值就是 true。</p>
<p>如果 x 是其他值,则返回 false。</p>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>isNaN() 函数可用于判断其参数是否是 NaN，该值表示一个非法的数字（比如被 0 除后得到的结果）。</p>
<p>如果把 NaN 与任何值（包括其自身）相比得到的结果均是 false，所以要判断某个值是否是 NaN，不能使用 == 或 === 运算符。正因为如此，isNaN() 函数是必需的。</p>
<h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>isNaN() 函数通常用于检测 parseFloat() 和 parseInt() 的结果，以判断它们表示的是否是合法的数字。当然也可以用 isNaN() 函数来检测算数错误，比如用 0 作除数的情况。</p>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="检查数字是否非法"><a href="#检查数字是否非法" class="headerlink" title="检查数字是否非法"></a>检查数字是否非法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="built_in">isNaN</span>(<span class="number">123</span>));</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="built_in">isNaN</span>(<span class="number">-1.23</span>));</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="built_in">isNaN</span>(<span class="number">5</span><span class="number">-2</span>));</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="built_in">isNaN</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="built_in">isNaN</span>(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="built_in">isNaN</span>(<span class="string">&quot;2005/12/12&quot;</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>页面到达最小宽度后固定</title>
    <url>/2017/04/07/2017-04-07-%E9%A1%B5%E9%9D%A2%E5%88%B0%E8%BE%BE%E6%9C%80%E5%B0%8F%E5%AE%BD%E5%BA%A6%E5%90%8E%E5%9B%BA%E5%AE%9A/</url>
    <content><![CDATA[<p>让页面到达最小宽度后固定不再改变，代码如下：</p>
<a id="more"></a>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5%</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5%</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">1000px</span>; </span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">expression</span>(document.body.clientWidth &lt; <span class="number">1000</span>? <span class="string">&quot;1000px&quot;</span>: <span class="string">&quot;auto&quot;</span> ); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse报错One or more constraints have not been satisfied解决方法</title>
    <url>/2017/03/17/2017-03-17-Eclipse%E6%8A%A5%E9%94%99One%20or%20more%20constraints%20have%20not%20been%20satisfied%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>解决maven项目导入eclipse中后，代码不报错，但是项目整体报错为：One or more constraints have not been satisfied.</p>
<a id="more"></a>
<ol>
<li><p>在pom.xml中添加下面内容即可，同时也可以解决Maven-&gt;update project默认jdk的问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.x<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.x<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.x<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.x<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>修改项目Project Facets为Dynamic Web Module</p>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  修改项目属性</p>
<p>右键Eclipse的工程，选择属性，在Project Facets中选择Dynamic Web Module，将3.0修改为2.5，可能会提示如下信息：</p>
<p>Cannot change version of project facet Dynamic Web Module to 2.5</p>
<p>这样表示修改不了，然后采用第二种方法</p>
</li>
<li><p><input checked="" disabled="" type="checkbox">  修改配置文件</p>
<p>找到项目的硬盘目录，打开项目下的 .setting文件夹，如下图：</p>
<p><img src="/images/2017-03/2017-03-17-001.png"></p>
<p>找到 .setting文件夹内的org.eclipse.wst.common.project.facet.core.xml文件，文件格式大致如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">faceted-project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">runtime</span> <span class="attr">name</span>=<span class="string">&quot;Apache Tomcat v5.5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fixed</span> <span class="attr">facet</span>=<span class="string">&quot;jst.web&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fixed</span> <span class="attr">facet</span>=<span class="string">&quot;jst.java&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">&quot;jst.java&quot;</span> <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">&quot;jst.web&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">&quot;wst.jsdt.web&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">faceted-project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接手动修改jst.web对应的version就正常了。</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>表格的宽度随着文字的长度变宽</title>
    <url>/2017/04/10/2017-04-10-%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%AE%BD%E5%BA%A6%E9%9A%8F%E7%9D%80%E6%96%87%E5%AD%97%E7%9A%84%E9%95%BF%E5%BA%A6%E5%8F%98%E5%AE%BD/</url>
    <content><![CDATA[<p>表格宽度随着文字的变化，不折行显示，代码如下：</p>
<a id="more"></a>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">td</span> &#123; </span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript JSON.parse()和JSON.stringify()用法和区别</title>
    <url>/2017/04/12/2017-04-12-JavaScript%20JSON.parse()%E5%92%8CJSON.stringify()%E7%94%A8%E6%B3%95%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>JSON.parse()用于从一个字符串中解析出json对象，如：</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;Zzz&quot;, &quot;age&quot;: &quot;23&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="built_in">JSON</span>.parse(str);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span></span><br><span class="line">    age: <span class="string">&quot;23&quot;</span></span><br><span class="line">    name: <span class="string">&quot;Zzz&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。</p>
<p>JSON.stringify()用于从一个对象解析出字符串，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj)</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse打开后提示Subversion Native Library Not Available解决办法</title>
    <url>/2017/04/14/2017-04-14-Eclipse%E6%89%93%E5%BC%80%E5%90%8E%E6%8F%90%E7%A4%BASubversion%20Native%20Library%20Not%20Available%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>打开Eclipse后，弹出来如下：</p>
<p><img src="/images/2017-04/2017-04-14-001.png"></p>
<p>解决方案：</p>
<p>Window -&gt; Preferences -&gt; Team -&gt; SVN，将SVN接口的Client修改为SVNKit(Pure JAVA) SVNKit v1.7.9.9659选项，点击OK。</p>
<p> <img src="/images/2017-04/2017-04-14-002.png"></p>
]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>Java String类的format()方式介绍和使用</title>
    <url>/2017/04/17/2017-04-17-Java%20String%E7%B1%BB%E7%9A%84format()%E6%96%B9%E5%BC%8F%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>String类的format()方法用于创建格式化的字符串以及连接多个字符串对象。熟悉C语言的同学应该还记得C语言的sprintf()方法，两者有类似之处。</p>
<a id="more"></a>

<p>format()方法有两种重载形式：</p>
<p><code>format(String format, Object... args)</code> 新字符串使用本地语言环境，制定字符串格式和参数生成格式化的新字符串。</p>
<p><code>format(Locale locale, String format, Object... args)</code> 使用指定的语言环境，制定字符串格式和参数生成格式化的字符串。</p>
<p>显示不同转换符实现不同数据类型到字符串的转换，如下：</p>
<p><img src="/images/2017-04/2017-04-17-001.png"></p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="keyword">null</span>;</span><br><span class="line">    str = String.format(<span class="string">&quot;Hi,%s&quot;</span>, <span class="string">&quot;张力&quot;</span>);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    str = String.format(<span class="string">&quot;Hi,%s:%s.%s&quot;</span>, <span class="string">&quot;张南&quot;</span>,<span class="string">&quot;张力&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    </span><br><span class="line">    System.out.printf(<span class="string">&quot;字母a的大写是：%c %n&quot;</span>, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    System.out.printf(<span class="string">&quot;3&gt;7的结果是：%b %n&quot;</span>, <span class="number">3</span>&gt;<span class="number">7</span>); </span><br><span class="line">    System.out.printf(<span class="string">&quot;100的一半是：%d %n&quot;</span>, <span class="number">100</span>/<span class="number">2</span>); </span><br><span class="line">    System.out.printf(<span class="string">&quot;100的16进制数是：%x %n&quot;</span>, <span class="number">100</span>); </span><br><span class="line">    System.out.printf(<span class="string">&quot;100的8进制数是：%o %n&quot;</span>, <span class="number">100</span>); </span><br><span class="line">    System.out.printf(<span class="string">&quot;50元的书打8.5折扣是：%f 元%n&quot;</span>, <span class="number">50</span>*<span class="number">0.85</span>); </span><br><span class="line">    System.out.printf(<span class="string">&quot;上面价格的16进制数是：%a %n&quot;</span>, <span class="number">50</span>*<span class="number">0.85</span>); </span><br><span class="line">    System.out.printf(<span class="string">&quot;上面价格的指数表示：%e %n&quot;</span>, <span class="number">50</span>*<span class="number">0.85</span>);</span><br><span class="line">    System.out.printf(<span class="string">&quot;上面价格的指数和浮点数结果的长度较短的是：%g %n&quot;</span>, <span class="number">50</span>*<span class="number">0.85</span>);</span><br><span class="line">    System.out.printf(<span class="string">&quot;上面的折扣是%d%% %n&quot;</span>, <span class="number">85</span>);</span><br><span class="line">    System.out.printf(<span class="string">&quot;字母A的散列码是：%h %n&quot;</span>, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi,张力 </span><br><span class="line">Hi,张南:张力.张三 </span><br><span class="line">字母a的大写是：A  </span><br><span class="line">3&gt;7的结果是：false  </span><br><span class="line">100的一半是：50  </span><br><span class="line">100的16进制数是：64  </span><br><span class="line">100的8进制数是：144  </span><br><span class="line">50元的书打8.5折扣是：42.500000 元 </span><br><span class="line">上面价格的16进制数是：0x1.54p5  </span><br><span class="line">上面价格的指数表示：4.250000e+01  </span><br><span class="line">上面价格的指数和浮点数结果的长度较短的是：42.5000  </span><br><span class="line">上面的折扣是85%  </span><br><span class="line">字母A的散列码是：41</span><br></pre></td></tr></table></figure>

<p>搭配转换符的标志，如下：</p>
<p><img src="/images/2017-04/2017-04-17-002.png"></p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// $使用</span></span><br><span class="line">    str = String.format(<span class="string">&quot;格式参数$的使用：%1$d,%2$s&quot;</span>, <span class="number">99</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="comment">// +使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;显示正负数的符号：%+d与%d%n&quot;</span>, <span class="number">99</span>,-<span class="number">99</span>);</span><br><span class="line">    <span class="comment">// 补O使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;最牛的编号是：%03d%n&quot;</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="comment">// 空格使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;Tab键的效果是：% 8d%n&quot;</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="comment">// .使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;整数分组的效果是：%,d%n&quot;</span>, <span class="number">9989997</span>);</span><br><span class="line">    <span class="comment">// 空格和小数点后面个数</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;一本书的价格是：% 50.5f元%n&quot;</span>, <span class="number">49.8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式参数$的使用：99,abc</span><br><span class="line">显示正负数的符号：+99与-99</span><br><span class="line">最牛的编号是：007</span><br><span class="line">Tab键的效果是：    7</span><br><span class="line">整数分组的效果是：9,989,997</span><br><span class="line">一本书的价格是：                     49.80000元</span><br></pre></td></tr></table></figure>

<p>日期和事件字符串格式化，常见日期和时间组合的格式，如下：</p>
<p><img src="/images/2017-04/2017-04-17-003.png"></p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">// c的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;全部日期和时间信息：%tc%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// f的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;年-月-日格式：%tF%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// d的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;月/日/年格式：%tD%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// r的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;HH:MM:SS PM格式（12时制）：%tr%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// t的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;HH:MM:SS格式（24时制）：%tT%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// R的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;HH:MM格式（24时制）：%tR&quot;</span>, date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012</span><br><span class="line">年-月-日格式：2012-09-10</span><br><span class="line">月&#x2F;日&#x2F;年格式：09&#x2F;10&#x2F;12</span><br><span class="line">HH:MM:SS PM格式（12时制）：10:43:36 上午</span><br><span class="line">HH:MM:SS格式（24时制）：10:43:36</span><br><span class="line">HH:MM格式（24时制）：10:43</span><br></pre></td></tr></table></figure>

<p>定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。</p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    Date date=<span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">// b的使用，月份简称</span></span><br><span class="line">    String str = String.format(Locale.US,<span class="string">&quot;英文月份简称：%tb&quot;</span>, date);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    System.out.printf(<span class="string">&quot;本地月份简称：%tb%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// B的使用，月份全称</span></span><br><span class="line">    str = String.format(Locale.US,<span class="string">&quot;英文月份全称：%tB&quot;</span>, date);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    System.out.printf(<span class="string">&quot;本地月份全称：%tB%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// a的使用，星期简称</span></span><br><span class="line">    str = String.format(Locale.US,<span class="string">&quot;英文星期的简称：%ta&quot;</span>, date);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="comment">// A的使用，星期全称</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;本地星期的简称：%tA%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// C的使用，年前两位</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;年的前两位数字（不足两位前面补0）：%tC%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// y的使用，年后两位</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;年的后两位数字（不足两位前面补0）：%ty%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// j的使用，一年的天数</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;一年中的天数（即年的第几天）：%tj%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// m的使用，月份</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;两位数字的月份（不足两位前面补0）：%tm%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// d的使用，日（二位，不够补零）</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;两位数字的日（不足两位前面补0）：%td%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// e的使用，日（一位不补零）</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;月份的日（前面不补0）：%te&quot;</span>, date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">英文月份简称：Sep</span><br><span class="line">本地月份简称：九月</span><br><span class="line">英文月份全称：September</span><br><span class="line">本地月份全称：九月</span><br><span class="line">英文星期的简称：Mon</span><br><span class="line">本地星期的简称：星期一</span><br><span class="line">年的前两位数字（不足两位前面补0）：20</span><br><span class="line">年的后两位数字（不足两位前面补0）：12</span><br><span class="line">一年中的天数（即年的第几天）：254</span><br><span class="line">两位数字的月份（不足两位前面补0）：09</span><br><span class="line">两位数字的日（不足两位前面补0）：10</span><br><span class="line">月份的日（前面不补0）：10</span><br></pre></td></tr></table></figure>

<p>和日期格式转换符相比，时间格式的转换符要更多、更精确。它可以将时间格式化成时、分、秒甚至时毫秒等单位。格式化时间字符串的转换符如下：</p>
<p><img src="/images/2017-04/2017-04-17-004.png"></p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    <span class="comment">// H的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;2位数字24时制的小时（不足2位前面补0）:%tH%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// I的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;2位数字12时制的小时（不足2位前面补0）:%tI%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// k的使用 </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;2位数字24时制的小时（前面不补0）:%tk%n&quot;</span>, date); </span><br><span class="line">    <span class="comment">// l的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;2位数字12时制的小时（前面不补0）:%tl%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// M的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;2位数字的分钟（不足2位前面补0）:%tM%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// S的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;2位数字的秒（不足2位前面补0）:%tS%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// L的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;3位数字的毫秒（不足3位前面补0）:%tL%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// N的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;9位数字的毫秒数（不足9位前面补0）:%tN%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// p的使用</span></span><br><span class="line">    String str = String.format(Locale.US, <span class="string">&quot;小写字母的上午或下午标记(英)：%tp&quot;</span>, date);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    System.out.printf(<span class="string">&quot;小写字母的上午或下午标记（中）：%tp%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// z的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;相对于GMT的RFC822时区的偏移量:%tz%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// Z的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;时区缩写字符串:%tZ%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">// s的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;1970-1-1 00:00:00 到现在所经过的秒数：%ts%n&quot;</span>, date);</span><br><span class="line">    <span class="comment">//Q的使用</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;1970-1-1 00:00:00 到现在所经过的毫秒数：%tQ%n&quot;</span>, date);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2位数字24时制的小时（不足2位前面补0）:11</span><br><span class="line">2位数字12时制的小时（不足2位前面补0）:11</span><br><span class="line">2位数字24时制的小时（前面不补0）:11</span><br><span class="line">2位数字12时制的小时（前面不补0）:11</span><br><span class="line">2位数字的分钟（不足2位前面补0）:03</span><br><span class="line">2位数字的秒（不足2位前面补0）:52</span><br><span class="line">3位数字的毫秒（不足3位前面补0）:773</span><br><span class="line">9位数字的毫秒数（不足9位前面补0）:773000000</span><br><span class="line">小写字母的上午或下午标记(英)：am</span><br><span class="line">小写字母的上午或下午标记（中）：上午</span><br><span class="line">相对于GMT的RFC822时区的偏移量:+0800</span><br><span class="line">时区缩写字符串:CST</span><br><span class="line">1970-1-1 00:00:00 到现在所经过的秒数：1347246232</span><br><span class="line">1970-1-1 00:00:00 到现在所经过的毫秒数：1347246232773</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Spring MVC拦截器和自定义注解实现简易的认证</title>
    <url>/2017/04/21/2017-04-21-%E5%88%A9%E7%94%A8Spring%20MVC%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%9A%84%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<p>利用Spring MVC提供的HandlerInterceptor拦截器，实现一个简易的身份权限认证。</p>
<a id="more"></a>
<p>HandlerInterceptor是Spring MVC提供的拦截器接口，大致源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(  </span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletRequest request, HttpServletResponse response,   </span></span></span><br><span class="line"><span class="function"><span class="params">        Object handler)</span>   </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(  </span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletRequest request, HttpServletResponse response,   </span></span></span><br><span class="line"><span class="function"><span class="params">        Object handler, ModelAndView modelAndView)</span>   </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(  </span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletRequest request, HttpServletResponse response,   </span></span></span><br><span class="line"><span class="function"><span class="params">        Object handler, Exception ex)</span>  </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>preHandle：在执行action里面的处理逻辑之前执行，它返回的是boolean，如果返回true，会接着执行postHandle和afterCompletion，如果返回false则中断执行。</p>
<p>postHandle：在执行action里面的逻辑后返回视图之前执行。</p>
<p>afterCompletion：在action返回视图后执行。</p>
</blockquote>
<p>HandlerInterceptorAdapter适配器是Spring MVC对HandlerInterceptor 的默认实现，里面的3个方法没有做任何处理，在preHandle方法直接返回true，这样继承HandlerInterceptorAdapter后只需要实现3个方法中需要的方法即可，而不像继承HandlerInterceptor一样不管是否需要3个方法都要实现。</p>
<p>当然借助于HandlerInterceptor可以实现很多其它功能，比如日志记录、请求处理时间分析等，权限验证只是其中之一。</p>
<p>开始完成注解式权限验证的功能。</p>
<p>Controller 和 Action：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/login&quot;, method = &#123;RequestMethod.GET&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>views文件夹下的视图login.jsp：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        这里是登录界面</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>自定义注解 AuthPasspor：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AuthPassport &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">validate</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义拦截器AuthInterceptor继承HandlerInterceptorAdapter：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(handler.getClass().isAssignableFrom(HandlerMethod.class))&#123;</span><br><span class="line">            AuthPassport authPassport = ((HandlerMethod) handler).getMethodAnnotation(AuthPassport.class);</span><br><span class="line">            <span class="comment">// 没有声明需要权限,或者声明不验证权限</span></span><br><span class="line">            <span class="keyword">if</span>(authPassport == <span class="keyword">null</span> || authPassport.validate() == <span class="keyword">false</span>)&#123;                </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 在这里实现自己的权限验证逻辑</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">false</span>)&#123;</span><br><span class="line">                    <span class="comment">// 如果验证成功返回true（这里直接写false来模拟验证失败的处理）</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果验证失败 返回到登录界面</span></span><br><span class="line">                    response.sendRedirect(<span class="string">&quot;account/login&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置项目的springservlet-config.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.i18n.LocaleChangeInterceptor&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.web.auth.AuthInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样在执行每个action方法是都会调用AuthInterceptor处理，当判断action上有无定义AuthPassport注解时就会执行里面的权限验证逻辑。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring MVC</tag>
        <tag>Annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>请求参数乱码或是返回结果乱码问题解决</title>
    <url>/2017/04/25/2017-04-25-%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E4%B9%B1%E7%A0%81%E6%88%96%E6%98%AF%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<ol>
<li><p>JSP页面出现乱码时，检查在页面最上面是否含有如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> %&gt;  </span><br></pre></td></tr></table></figure>
</li>
<li><p>检查数据库链接的配置是否指定了正确的字符集</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.mysql.url</span>=<span class="string">jdbc:mysql://localhost:3306/db?useUnicode=true&amp;characterEncoding=utf8&amp;allowMultiQueries=true </span></span><br></pre></td></tr></table></figure>

<p>还需要查看数据的字符集配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;character_set_%&#39;; </span><br></pre></td></tr></table></figure>

<p><img src="/images/2017-04/2017-04-25-001.png"></p>
<p>发现character_set_server=latin1,我们需要把它改为utf-8</p>
</li>
<li><p>检查项目web.xml中配置是否配置了全局字符编码过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p>后台接收到的get请求参数中文乱码时，检查tomcat容器中的server.xml是否配置了编码字符集</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;80&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>你的时区</title>
    <url>/2017/05/01/2017-05-01-%E4%BD%A0%E7%9A%84%E6%97%B6%E5%8C%BA/</url>
    <content><![CDATA[<p><img src="/images/2017-05/2017-05-01-001.jpg"></p>
<blockquote>
<p>纽约时间比加州时间早三个小时，<br>New York is 3 hours ahead of California,</p>
</blockquote>
<blockquote>
<p>但加州时间并没有变慢。<br>but it does not make California slow.</p>
</blockquote>
<blockquote>
<p>有人22岁就毕业了，<br>Someone graduated at the age o f 22,</p>
</blockquote>
<blockquote>
<p>但等了五年才找到稳定的工作！<br>but waited 5 years before securing a good job!</p>
</blockquote>
<blockquote>
<p>有人25岁就当上CEO，<br>Someone became a CEO at 25,</p>
</blockquote>
<blockquote>
<p>却在50岁去世。<br>and died at 50.</p>
</blockquote>
<blockquote>
<p>也有人迟到50岁才当上CEO，<br>While another became a CEO at 50,</p>
</blockquote>
<blockquote>
<p>然后活到90岁。<br>and lived to 90 years.</p>
</blockquote>
<blockquote>
<p>有人单身，<br>Someone is still single,</p>
</blockquote>
<blockquote>
<p>同时也有人已婚。<br>while someone else got married.</p>
</blockquote>
<blockquote>
<p>奥巴马55岁就退休，<br>Obama retires at 55,</p>
</blockquote>
<blockquote>
<p>川普70岁才开始当总统。<br>but Trump starts at 70.</p>
</blockquote>
<blockquote>
<p>世上每个人本来就有自己的发展时区。<br>Absolutely everyone in this world works based on their Time Zone.</p>
</blockquote>
<blockquote>
<p>身边有些人看似走在你前面，<br>People around you might seem to go ahead of you,</p>
</blockquote>
<blockquote>
<p>也有人看似走在你后面。<br>some might seem to be behind you.</p>
</blockquote>
<blockquote>
<p>但其实每个人在自己的时区有自己的步程。<br>But everyone is running their own RACE, in their own TIME.</p>
</blockquote>
<blockquote>
<p>不用嫉妒或嘲笑他们。<br>Don’t envy them or mock them.</p>
</blockquote>
<blockquote>
<p>他们都在自己的时区里，你也是！<br>They are in their TIME ZONE, and you are in yours!</p>
</blockquote>
<blockquote>
<p>生命就是等待正确的行动时机。<br>Life is about waiting for the right moment to act.</p>
</blockquote>
<blockquote>
<p>所以，放轻松。<br>So, RELAX.</p>
</blockquote>
<blockquote>
<p>你没有落后。<br>You’re not LATE.</p>
</blockquote>
<blockquote>
<p>你没有领先。<br>You’re not EARLY.</p>
</blockquote>
<blockquote>
<p>在你自己的时区里，一切安排都准时。<br>You are very much ON TIME, and in your TIME ZONE.</p>
</blockquote>
<p><img src="/images/2017-05/2017-05-01-002.jpg"></p>
<p><strong>注：图片和文字均来源于网络，版权属于原作者或网站。如有版权疑问，请与相关内容原作者或来源网站联系。</strong></p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>Others</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLServer分页查询</title>
    <url>/2017/05/08/2017-05-08-SQLServer%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>在SQLServer 2005之前一直借助<code>top</code>关键字来实现分页查询，不过效率低，在SQLServer 2005及其之后的版本都使用<code>row_number()</code>解析函数来完成分页查询，效率有了很大的提高，不过sql语句比较复杂，下面给出分页查询的通式：</p>
<a id="more"></a>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * firstIndex:起始索引</span></span><br><span class="line"><span class="comment"> * pageSize:每页显示的数量</span></span><br><span class="line"><span class="comment"> * orderColumn:排序的字段名</span></span><br><span class="line"><span class="comment"> * sql:可以是简单的单表查询语句，也可以是复杂的多表联合查询语句</span></span><br><span class="line"><span class="comment"> */</span>    </span><br><span class="line"><span class="keyword">select</span> top pageSize o.* <span class="keyword">from</span> (<span class="keyword">select</span> row_number() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> orderColumn) <span class="keyword">as</span> rownumber, * <span class="keyword">from</span>(<span class="keyword">sql</span>) <span class="keyword">as</span> o <span class="keyword">where</span> rownumber&gt;firstIndex;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>SQLServer</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 视图</title>
    <url>/2017/05/09/2017-05-09-SQL%20%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<ol>
<li><p>SQL CREATE VIEW 语句</p>
<p>什么是视图？</p>
<p>在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。</p>
<p>视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，我们也可以提交数据，就像这些来自于某个单一的表。</p>
<p>注释：数据库的设计和结构不会受到视图中的函数、where 或 join 语句的影响。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SQL CREATE VIEW 语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span> </span><br><span class="line">    <span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> condition</span><br></pre></td></tr></table></figure>

<p>注释：视图总是显示最近的数据。每当用户查询视图时，数据库引擎通过使用 SQL 语句来重建数据。</p>
</li>
<li><p>SQL CREATE VIEW 实例</p>
<p>可以从某个查询内部、某个存储过程内部，或者从另一个视图内部来使用视图。通过向视图添加函数、join 等等，我们可以向用户精确地提交我们希望提交的数据。</p>
<p>样本数据库 Northwind 拥有一些被默认安装的视图。视图 “Current Product List” 会从 Products 表列出所有正在使用的产品。这个视图使用下列 SQL 创建：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [<span class="keyword">Current</span> Product <span class="keyword">List</span>] <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> ProductID,ProductName <span class="keyword">FROM</span> Products <span class="keyword">WHERE</span> Discontinued=<span class="keyword">No</span></span><br></pre></td></tr></table></figure>

<p>我们可以查询上面这个视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">Current</span> Product <span class="keyword">List</span>]</span><br></pre></td></tr></table></figure>

<p>Northwind 样本数据库的另一个视图会选取 Products 表中所有单位价格高于平均单位价格的产品：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [Products Above Average Price] <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> ProductName,UnitPrice <span class="keyword">FROM</span> Products </span><br><span class="line">    <span class="keyword">WHERE</span> UnitPrice&gt;(<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(UnitPrice) <span class="keyword">FROM</span> Products) </span><br></pre></td></tr></table></figure>

<p>我们可以像这样查询上面这个视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [Products Above Average Price]</span><br></pre></td></tr></table></figure>

<p>另一个来自 Northwind 数据库的视图实例会计算在 1997 年每个种类的销售总数。请注意，这个视图会从另一个名为 “Product Sales for 1997” 的视图那里选取数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [<span class="keyword">Category</span> Sales <span class="keyword">For</span> <span class="number">1997</span>] <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> CategoryName,<span class="keyword">Sum</span>(ProductSales) <span class="keyword">AS</span> CategorySales</span><br><span class="line">    <span class="keyword">FROM</span> [Product Sales <span class="keyword">for</span> <span class="number">1997</span>] <span class="keyword">GROUP</span> <span class="keyword">BY</span> CategoryName </span><br></pre></td></tr></table></figure>

<p>我们可以像这样查询上面这个视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">Category</span> Sales <span class="keyword">For</span> <span class="number">1997</span>]</span><br></pre></td></tr></table></figure>

<p>我们也可以向查询添加条件。现在，我们仅仅需要查看 “Beverages” 类的全部销量：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">Category</span> Sales <span class="keyword">For</span> <span class="number">1997</span>]</span><br><span class="line"><span class="keyword">WHERE</span> CategoryName=<span class="string">&#x27;Beverages&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>SQL 更新视图</p>
<p>可以使用下面的语法来更新视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL <span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> Syntax</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> condition</span><br></pre></td></tr></table></figure>

<p>现在，我们希望向 “Current Product List” 视图添加 “Category” 列。我们将通过下列 SQL 更新视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [<span class="keyword">Current</span> Product <span class="keyword">List</span>] <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> ProductID,ProductName,<span class="keyword">Category</span></span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> Discontinued=<span class="keyword">No</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>SQL 撤销视图</p>
<p>可以通过 DROP VIEW 命令来删除视图。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL <span class="keyword">DROP</span> <span class="keyword">VIEW</span> Syntax</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_name</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>View</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript location.href 与 location.search比较</title>
    <url>/2017/05/15/2017-05-15-JavaScript%20location.href%20%E4%B8%8E%20location.search%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<p><code>document.location.href</code> 返回完整的 URL。 </p>
<p>如：<code>http://www.cftea.com/foo.asp?p=1</code></p>
<p><code>document.location.search</code>是从当前URL的?号开始的字符串</p>
<p>如：<code>http://www.51js.com/viewthread.php?tid=22720</code></p>
<p>它返回的就是：<code>?tid=22720</code></p>
<p>通过location.search可以轻易取到连接后面带的参数，这个可用户父窗口向子窗口传递参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openTable</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> feathers=<span class="string">&quot;status=no, width=650px, height=670px, top=0px, menubar=no, resizable=no, scrollbars=yes, toolbar=no, channelmode=no&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> openWin = <span class="built_in">window</span>.open(<span class="string">&quot;allInfo.html?&quot;</span>+id+<span class="string">&quot;,&quot;</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),<span class="string">&quot;declare&quot;</span>,feathers);</span><br><span class="line">    openWin.focus();  </span><br><span class="line">&#125; </span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>在allInfo.html页面中如果我们要获取id的值的话，可以这样获得</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span>   </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> params= <span class="built_in">window</span>.location.search;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = params.substring(<span class="number">1</span>).split(<span class="string">&quot;,&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> id = arr[<span class="number">0</span>];</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的一些正则表达式</title>
    <url>/2017/05/22/2017-05-22-%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^[1-9]d*$　 　 &#x2F;&#x2F;匹配正整数</span><br><span class="line">^-[1-9]d*$ 　 &#x2F;&#x2F;匹配负整数</span><br><span class="line">^-?[1-9]d*$　　 &#x2F;&#x2F;匹配整数</span><br><span class="line">^[1-9]d*|0$　 &#x2F;&#x2F;匹配非负整数（正整数 + 0）</span><br><span class="line">^-[1-9]d*|0$　　 &#x2F;&#x2F;匹配非正整数（负整数 + 0）</span><br><span class="line">^[1-9]d*.d*|0.d*[1-9]d*$　　 &#x2F;&#x2F;匹配正浮点数</span><br><span class="line">^-([1-9]d*.d*|0.d*[1-9]d*)$　 &#x2F;&#x2F;匹配负浮点数</span><br><span class="line">^-?([1-9]d*.d*|0.d*[1-9]d*|0?.0+|0)$　 &#x2F;&#x2F;匹配浮点数</span><br><span class="line">^[1-9]d*.d*|0.d*[1-9]d*|0?.0+|0$　　 &#x2F;&#x2F;匹配非负浮点数（正浮点数 + 0）</span><br><span class="line">^(-([1-9]d*.d*|0.d*[1-9]d*))|0?.0+|0$　　&#x2F;&#x2F;匹配非正浮点数（负浮点数 + 0）</span><br><span class="line">验证数字：^[0-9]*$</span><br><span class="line">验证n位的数字：^\d&#123;n&#125;$</span><br><span class="line">验证至少n位数字：^\d&#123;n,&#125;$</span><br><span class="line">验证m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line">验证零和非零开头的数字：^(0|[1-9][0-9]*)$</span><br><span class="line">验证有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br><span class="line">验证有1-3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span><br><span class="line">验证非零的正整数：^\+?[1-9][0-9]*$</span><br><span class="line">验证非零的负整数：^\-[1-9][0-9]*$</span><br><span class="line">验证非负整数（正整数 + 0） ^\d+$</span><br><span class="line">验证非正整数（负整数 + 0） ^((-\d+)|(0+))$</span><br><span class="line">验证长度为3的字符：^.&#123;3&#125;$</span><br><span class="line">验证由26个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line">验证由26个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line">验证由26个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line">验证由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$</span><br><span class="line">验证由数字、26个英文字母或者下划线组成的字符串：^\w+$</span><br><span class="line">验证用户密码:^[a-zA-Z]\w&#123;5,17&#125;$ 正确格式为：以字母开头，长度在6-18之间，只能包含字符、数字和下划线。</span><br><span class="line">验证是否含有 ^%&amp;&#39;,;&#x3D;?$\&quot; 等字符：[^%&amp;&#39;,;&#x3D;?$\x22]+</span><br><span class="line">验证汉字：^[\u4e00-\u9fa5],&#123;0,&#125;$</span><br><span class="line">验证Email地址：^\w+[-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><span class="line">验证InternetURL：^http:&#x2F;&#x2F;([\w-]+\.)+[\w-]+(&#x2F;[\w-.&#x2F;?%&amp;&#x3D;]*)?$ ；^[a-zA-z]+:&#x2F;&#x2F;(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$</span><br><span class="line">验证电话号码：^(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-)?\d&#123;7,8&#125;$：--正确格式为：XXXX-XXXXXXX，XXXX- XXXXXXXX，XXX-XXXXXXX，XXX-XXXXXXXX，XXXXXXX，XXXXXXXX。</span><br><span class="line">验证身份证号（15位或18位数字）：^\d&#123;15&#125;|\d&#123;&#125;18$</span><br><span class="line">验证一年的12个月：^(0?[1-9]|1[0-2])$ 正确格式为：“01”-“09”和“1”“12”</span><br><span class="line">验证一个月的31天：^((0?[1-9])|((1|2)[0-9])|30|31)$  正确格式为：01、09和1、31。</span><br><span class="line">整数：^-?\d+$</span><br><span class="line">非负浮点数（正浮点数 + 0）：^\d+(\.\d+)?$</span><br><span class="line">正浮点数  ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</span><br><span class="line">非正浮点数（负浮点数 + 0） ^((-\d+(\.\d+)?)|(0+(\.0+)?))$</span><br><span class="line">负浮点数 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</span><br><span class="line">浮点数 ^(-?\d+)(\.\d+)?$</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java使用BigDecimal进行精确运算</title>
    <url>/2017/05/17/2017-05-17-Java%E4%BD%BF%E7%94%A8BigDecimal%E8%BF%9B%E8%A1%8C%E7%B2%BE%E7%A1%AE%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p>Java中会遇到使用浮点数进行运算，比如当你运行下面代码时，</p>
<p><code>System.out.println(0.06+0.01);</code></p>
<p>你以为结果是<code>0.06</code>？当你运行完发现结果居然是 <code>0.06999999999999999</code></p>
<p>这是为什么呢？究竟该如何运算呢？</p>
<a id="more"></a>

<p>普通的浮点型数字的运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">0.06</span>+<span class="number">0.01</span>);</span><br><span class="line">        System.out.println(<span class="number">1.0</span>-<span class="number">0.42</span>);</span><br><span class="line">        System.out.println(<span class="number">4.015</span>*<span class="number">100</span>);</span><br><span class="line">        System.out.println(<span class="number">303.1</span>/<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.06999999999999999</span><br><span class="line">0.5800000000000001</span><br><span class="line">401.49999999999994</span><br><span class="line">0.30310000000000004</span><br></pre></td></tr></table></figure>

<p>这是由于二进制无法精确的表示浮点数而产生的误差，想要精确的计算浮点数则就用到了BigDecimal类。</p>
<p>BigDecimal 类提供以下操作：算术、标度操作、舍入、比较、哈希算法和格式转换。</p>
<p>是用户用来控制数值精度和舍入方法的类，适合用于解决数据精度过滤问题。对大量的数据进行精度变换的时候用此类很简便。</p>
<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">double</span> num=<span class="number">12.345623</span>;  </span><br><span class="line">    BigDecimal value1=<span class="keyword">new</span> BigDecimal(num);  </span><br><span class="line">    System.out.println(<span class="string">&quot;数字构造&quot;</span> + value1);  </span><br><span class="line">    BigDecimal value2=<span class="keyword">new</span> BigDecimal(Double.valueOf(num).toString());  </span><br><span class="line">    System.out.println(<span class="string">&quot;字符构造&quot;</span> + value2);  </span><br><span class="line">    System.out.println(<span class="string">&quot;由输出的结果我们可以看到使用数字类型的构造已经失真了，所以最好还是采用字符构造&quot;</span>);  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 对于向上下距离相等的数值的舍入，保留2位小数  </span></span><br><span class="line">    <span class="comment">// setScale方法中，第一个参数是设置保留小数位数，第二个参数是这是舍入方式  </span></span><br><span class="line">    <span class="comment">// 四舍五入  </span></span><br><span class="line">    BigDecimal value = value2.setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP);  </span><br><span class="line">    System.out.println(<span class="string">&quot;ROUND_HALF_UP: &quot;</span> + value);  </span><br><span class="line">    <span class="comment">// 舍入趋向于零的方式  </span></span><br><span class="line">    value=value2.setScale(<span class="number">2</span>, BigDecimal.ROUND_DOWN);  </span><br><span class="line">    System.out.println(<span class="string">&quot;ROUND_DOWN: &quot;</span> + value);  </span><br><span class="line">    <span class="comment">// 舍入远离零的方式  </span></span><br><span class="line">    value = value2.setScale(<span class="number">2</span>, BigDecimal.ROUND_UP);  </span><br><span class="line">    System.out.println(<span class="string">&quot;ROUND_UP&quot;</span>+value);  </span><br><span class="line">  &#125;  </span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数字构造12.345622999999999791498339618556201457977294921875 </span><br><span class="line">字符构造12.345623</span><br><span class="line">由输出的结果我们可以看到使用数字类型的构造已经失真了，所以最好还是采用字符构造</span><br><span class="line">ROUND_HALF_UP: 12.35 </span><br><span class="line">ROUND_DOWN: 12.34 </span><br><span class="line">ROUND_UP12.35 </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>BigDecimal</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Blob对象类型介绍和使用</title>
    <url>/2017/05/25/2017-05-25-JavaScript%20Blob%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Blob 是什么？ 这里说的是一种JavaScript的对象类型。Oracle 中也有类似的栏位类型。</p>
<a id="more"></a>

<p>使用旧方法创建 Blob 对象。</p>
<p>旧的方法使用 BlobBuilder 来创建一个Blob 实例，并且使用一个 append() 方法，将字符串（或者 ArrayBuffer 或者 Blob，此处用 string 举例）插入，一旦数据插入成功，就可以使用 getBlob() 方法设置一个 mime 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> builder = <span class="keyword">new</span> BolbBuilder();</span></span><br><span class="line"><span class="javascript">    builder.append(<span class="string">&quot;Hello World!&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> blob = builder.getBlob(<span class="string">&quot;text/plain&quot;</span>);  </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>新方法创建Blob 对象</p>
<p>在新的方法中直接可以通过 Blob() 的构造函数来创建了。</p>
<p>构造函数，接受两个参数，第一个为一个数据序列，可以是任意格式的值，例如，任意数量的字符串，Blobs 以及 ArrayBuffers。第二个参数，是一个包含了两个属性的对象，其两个属性分别是：</p>
<p>type – MIME 的类型。</p>
<p>endings – 决定 append() 的数据格式，（数据中的 \n 如何被转换）可以取值为 “transparent” 或者 “native”（t* 的话不变，n* 的话按操作系统转换；t* 为默认） </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([<span class="string">&quot;Hello World!&quot;</span>],&#123;<span class="attr">type</span>:<span class="string">&quot;text/plain&quot;</span>&#125;);  </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Blob的应用</p>
<p>大文件分割（slice() 方法）</p>
<p>slice() 方法接受三个参数，起始偏移量，结束偏移量，还有可选的 mime 类型。如果 mime 类型，没有设置，那么新的 Blob 对象的 mime 类型和父级一样。</p>
<p>当要上传大文件的时候，此方法非常有用，可以将大文件分割分段，然后各自上传，因为分割之后的 Blob 对象和原始的是独立存在的。</p>
<p>不过目前浏览器实现此方法还没有统一，火狐使用的是 mozSlice() ，Chrome 使用的是 webkitSlice() ，其他浏览器则正常的方式 slice() </p>
<p>可以写一个兼容各浏览器的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sliceBlob</span>(<span class="params">blob, start, end, type</span>) </span>&#123;</span><br><span class="line">    type = type || blob.type;</span><br><span class="line">    <span class="keyword">if</span> (blob.mozSlice) &#123;</span><br><span class="line">        <span class="keyword">return</span> blob.mozSlice(start, end, type);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blob.webkitSlice) &#123;</span><br><span class="line">        <span class="keyword">return</span> blob.webkitSlice(start, end type);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;This doesn&#x27;t work!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Chrome 中指定下载的文件名。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows环境下如何将免安装版Tomcat注册成系统服务</title>
    <url>/2017/05/31/2017-05-31-Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%A6%82%E4%BD%95%E5%B0%86%E5%85%8D%E5%AE%89%E8%A3%85%E7%89%88Tomcat%E6%B3%A8%E5%86%8C%E6%88%90%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>实际工作中会遇到电脑上安装多个Tomcat，当我们选用免安装的zip包来安装时，为了操作方便，会将Tomcat注册为系统服务，那应该如何操作呢？</p>
<a id="more"></a>

<p>注册服务：</p>
<blockquote>
<p>在DOS命令行模式下，cd到tomcat的bin目录下。</p>
</blockquote>
<blockquote>
<p>在tomcat的bin目录下可以看到有一个service.bat的批处理文件，这个文件就是为我们将tomcat注册成系统服务所用。有兴趣的可以打开看看批处理文件里面的内容。</p>
</blockquote>
<blockquote>
<p>执行命令：</p>
<p><code>service.bat install 服务名</code>  </p>
<p>后面的服务名可以随便取，别跟系统已有的服务名冲突就行。如果成功可以看到以下提示信息：</p>
<p><code>The Service &#39;服务名&#39; has been installed</code></p>
</blockquote>
<p>卸载服务：</p>
<blockquote>
<p>前两步骤和上面一致。执行命令：</p>
<p><code>service.bat uninstall 服务名</code></p>
<p>移除成功的提示信息：</p>
<p><code>The Service ‘服务名&#39; has been removed</code></p>
</blockquote>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows环境下通过Archive包安装MySQL</title>
    <url>/2018/12/01/2018-12-01-Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%80%9A%E8%BF%87Archive%E5%8C%85%E5%AE%89%E8%A3%85MySQL/</url>
    <content><![CDATA[<ol>
<li><p>打开MySQL官方网站，注意，Windows环境下使用Installer版本，傻瓜式安装，这里我们选择Archive版本，使用压缩包版本。<a href="https://downloads.mysql.com/archives/community/">下载传送门</a></p>
<p><img src="/images/2020-12/2018-12-01-001.png"></p>
</li>
<li><p>下载后解压到指定目录，目录结构如下：</p>
<p><img src="/images/2020-12/2018-12-01-002.png"></p>
</li>
<li><p>、在解压的根目录新建my.ini文件，填写主要的参数：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#设置3308端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3308</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\Program Files\MySQL\mysql-<span class="number">5.7</span>.<span class="number">21</span>-winx64</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\Program Files\MySQL\mysql-<span class="number">5.7</span>.<span class="number">21</span>-winx64\data </span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB </span><br></pre></td></tr></table></figure>
</li>
<li><p>进入到bin目录中，在此目录中打开命令窗口，初始化数据库，会自动根据配置生成data目录</p>
<p>输入：<code>mysqld --initialize</code></p>
<p><img src="/images/2020-12/2018-12-01-003.png"></p>
</li>
<li><p>将MySQL注册为系统服务，<strong>注意：这里一定要用管理员权限运行命令窗口，否则可能无权限创建服务。</strong></p>
<p>输入：<code>mysqld -install mysql-3308</code></p>
<p>服务名可以自定义，我这里用了<code>mysql-3308</code>（删除服务的命令为：<code>mysqld -remove mysql-3308</code>）</p>
<p><img src="/images/2020-12/2018-12-01-004.png"></p>
</li>
<li><p>在服务列表中启动服务</p>
<p><img src="/images/2020-12/2018-12-01-005.png"></p>
</li>
<li><p>在初始化后生成的data目录中找到<code>主机名.err</code>的文件，搜索<code>A temporary password</code>，就可以找到生成的临时密码</p>
<p><img src="/images/2020-12/2018-12-01-006.png"></p>
</li>
<li><p>通过临时密码登录mysql，并修改密码，因为临时密码可以登录，但是不能执行操作</p>
<p>在mysql的bin目录输入：<code>mysql -uroot -p</code></p>
<p>输入临时密码后登录，要想在全局都使用myql的命令，需要将mysql的bin目录配置到环境变量中，和配置JDK方法一致，这里不再赘述。</p>
<p>输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;root123&#39;</span><br></pre></td></tr></table></figure>

<p>这里我将root用户的密码修改为了<code>root123</code></p>
</li>
<li><p>下来我们为mysql的root用户开启远程连接，这样在局域网内其他机器就可以连接了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;root123&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLUSH  PRIVILEGES;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>至此，MySQL安装就全部完成了，安装过程如遇到什么问题欢迎留言，留言时记得留下邮箱哦。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
